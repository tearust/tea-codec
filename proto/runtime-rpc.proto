syntax = "proto3";
package rpc;

import "p2p.proto";

message AdapterServerRequest {
    string uuid = 1;
    oneof msg {
        AdapterHttpRequest AdapterHttpRequest = 2;
        CheckValidRsaPubKeyRequest CheckValidRsaPubKeyRequest = 3;
        DataUploadCompletedRequest DataUploadCompletedRequest = 4;
        IpfsInboundP2pForwardRequest IpfsInboundP2pForwardRequest = 5;
        IpfsP2pForwardResponse IpfsP2pForwardResponse = 6;
        IpfsBlockGetResponse IpfsBlockGetResponse = 7;
    }
}

message AdapterServerResponse {
    oneof msg {
        CheckValidRsaPubKeyResponse CheckValidRsaPubKeyResponse = 1;
        IpfsInboundP2pForwardResponse IpfsInboundP2pForwardResponse = 2;
    }
}

message AdapterClientRequest {
    oneof msg {
        IpfsBlockGetRequest IpfsBlockGetRequest = 1;
        IpfsInfoRequest IpfsInfoRequest = 2;
        IpfsP2pFrowardRequest IpfsP2pFrowardRequest = 3;
        IpfsP2pCloseRequest IpfsP2pCloseRequest = 4;
        IpfsPullCidDataRequest IpfsPullCidDataRequest = 5;
    }
}

message AdapterClientResponse {
    oneof msg {
        IpfsInfoResponse IpfsInfoResponse = 1;
    }
}

message Layer1GeneralRequest {
    oneof msg {
        AddNewNodeRequest AddNewNodeRequest = 2;
        TeaNodeUpdateProfileRequest UpdateNodeProfileRequest = 3;
        CommitRaResultRequest CommitRaResultRequest = 4;
        QueryTAppResourceRequest QueryTAppResourceRequest = 5;
        HttpExecutionRequest HttpExecutionRequest = 6;
    }
}

message Layer1GeneralResponse {
    oneof msg {
        AddNewNodeResponse AddNewNodeResponse = 1;
        QueryTAppResourceResponse QueryTAppResourceResponse = 2;
        HttpExecutionResponse HttpExecutionResponse = 3;
    }
}

message QueryTAppResourceRequest {
    uint64 tappId = 1;
}

message QueryTAppResourceResponse {
    string cid = 1;
}

message HttpExecutionRequest {
    string requestUrl = 1;
    repeated HttpExecutionHeader headers = 2;
}

message HttpExecutionHeader {
    string key = 1;
    string value = 2;
}

message HttpExecutionResponse {
    string responseJson = 1;
}

message AddNewNodeRequest {
  bytes teaId = 1;
}

message AddNewNodeResponse {
  bytes teaId = 1;
}

message IpfsInfoRequest {
    string peerId = 1;
}

message IpfsInfoResponse {
    string id = 1;
    string publicKey = 2;
    repeated string addresses = 3;
    string agentVersion = 4;
    string protocolVersion = 5;
}

message IpfsP2pFrowardRequest {
    string peerId = 1;
    string reply = 2;
    p2p.GeneralMsg p2pGeneralMsg = 3;
}

message IpfsP2pCloseRequest {
    string peerId = 1;
}

message IpfsPullCidDataRequest {
    string peerId = 1;
    string reply = 2;
    bytes payload = 3;
    bool pin = 4;
    string cid = 5;
}

message IpfsBlockGetRequest {
    string cid =  1;
    string reply = 2;
    bool waitLocally = 3;
    bool returnIfNotExist = 4;
}

message AdapterHttpRequest {
    string method = 1;
    string action = 2;
    bytes payload = 3;
}

message CheckValidRsaPubKeyRequest {
    string rsaPub = 1;
}

message CheckValidRsaPubKeyResponse {
    bytes result = 1;
}

message DataUploadCompletedRequest {
    bytes payload = 1;
}

message IpfsInboundP2pForwardRequest {
    string peerId = 1;
    p2p.GeneralMsg p2pGeneralMsg = 2;
}

message IpfsInboundP2pForwardResponse {
    p2p.P2pReplyMessage P2pReplyMessage = 1;
}

message IpfsP2pForwardResponse {
    p2p.P2pReplyMessage P2pReplyMessage = 1;
}

message IpfsBlockGetResponse {
    string cid = 1;
    string reply = 2;
    bytes payload = 3;
}



message TeaNodeUpdateProfileRequest{
  bytes ephemeralPublicKey = 1;//Generated by TPM everytime when tea node starts. It is expired when shutdown.
  string profileCid = 2;//IPFS Cid to store profile object->TeaNodeProfile
  bytes teaId = 3;//The node's TPM ID which generates ephemeralPublicKey and sign 
  repeated string publicUrls = 4;//Public URLs if this node is a bootstrap node. If would be [] if this node does not provide public service
  string peerId = 5;//ipfs peer id used for peer 2 peer communication
}

message CommitRaResultRequest {
  bytes teaId = 1;
  bytes targetTeaId = 2;
  bool isPass = 3;
  bytes signature = 4;
}
