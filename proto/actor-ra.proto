syntax = "proto2";

package actor_ra;

message LibP2PInitInfo {
  required bytes encodedBytes = 1;
  required bytes tpmSignature = 2;//sign based on public key of keypair not the encoded bytes
  required bytes teaId = 3;
  required uint32 blockHeightAtSign = 4;
  required bytes blockHashAtSign = 5;

}

message VerifyIdRequest{
  required uint32 nonce = 1;
  required bytes tpmSignature = 2;//sign based on public key of keypair not the encoded bytes
  required bytes teaId = 3;
  required uint32 blockHeightAtSign = 4;
  required bytes blockHashAtSign = 5;
  required bytes publicKey = 7;
  required string replyTo = 6;
}

message VerifyIdResponse{
  required uint32 nonce = 1;
  required bytes publicKey = 2;
  required bool result = 3;
  required uint32 blockHeightAtSign = 4;
  required uint32 blockHeightAtVerify = 6;
  optional string error = 5;
}

message PutPeerUrlResponse{
  repeated string list = 1;
}

message TeaNodeProfile{
  required uint32 profileVersion = 1;
  required bytes body = 2;
}

message RANode {
  required bytes teaId = 1;
  required bool isPass = 2;
}

message NodeProfile{
  required bytes ephemeralPublicKey = 1;//Generated by TPM everytime when tea node starts. It is expired when shutdown.
  required string profileCid = 2;//IPFS Cid to store profile object->TeaNodeProfile
  required bytes teaId = 3;//The node's TPM ID which generates ephemeralPublicKey and sign 
  repeated string publicUrls = 4;//Public URLs if this node is a bootstrap node. If would be [] if this node does not provide public service
  required string peerId = 5;//ipfs peer id used for peer 2 peer communication
  repeated RANode raNodes = 6;
  required string status = 7;
}

message TeaNodeUpdateProfileRequest{
  required bytes ephemeralPublicKey = 1;//Generated by TPM everytime when tea node starts. It is expired when shutdown.
  required string profileCid = 2;//IPFS Cid to store profile object->TeaNodeProfile
  required bytes teaId = 3;//The node's TPM ID which generates ephemeralPublicKey and sign 
  repeated string publicUrls = 4;//Public URLs if this node is a bootstrap node. If would be [] if this node does not provide public service
  required string peerId = 5;//ipfs peer id used for peer 2 peer communication
  required bytes signature = 6;//sign message is ephermeralPublicKey , signed using teaId.
}

message TeaNodeResponse{
  required string accountId = 1;
  required NodeProfile nodeProfile = 2;
}

message VerifyTeaNodeProfileIntegrityResponse{
  required bool success = 1;
}

message CommitRaResultRequest {
  required bytes teaId = 1;
  required bytes targetTeaId = 2;
  required bool isPass = 3;
  required bytes signature = 4;
}

message CommitRaResultResponse {
  required string accountId = 1;
  required bytes teaId = 2;
  required bytes targetTeaId = 3;
  required bool isPass = 4;
}