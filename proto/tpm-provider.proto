syntax = "proto2";
package tpm;

message VerifySignatureRequest{
  required bytes signature = 1;
  required bytes publicKey = 2;
  required bytes msg = 3;
}

message VerifySignatureResponse{
  required bool result = 1;
}

message Ed25519SignRequest{
  required bytes msg = 1;
  optional bytes key = 2;
}

message Ed25519SignResponse{
  required bytes sig = 1;
}

message Sr25519SignRequest{
  required bytes msg = 1;
  required bytes key = 2;
}

message Sr25519SignResponse{
  required bytes sig = 1;
}

message RsaDecryptRequest{
  required bytes private_key_pkcs1 = 1;
  required bytes msg = 2;

}

message RsaDecryptResponse{
  required bytes result = 1;
  optional string error = 2;
}

message RsaEncryptRequest{
  required bytes public_key_pkcs1 = 1;
  required bytes msg = 2;

}

message RsaEncryptResponse{
  required bytes result = 1;
}

message GetPcrRequest{

}

message GetPcrResponse{
  required Pcrs pcrs = 1;
}

message RsaKeyPairPemPcsk1{
  required string publicKey = 1;
  required string privateKey = 2;
}

message SignedPcrsBytes{
  required Pcrs pcrs = 1;
  required bytes sig = 2;
}

message TeaNodeProfileV1{
  required SignedPcrsBytes pcrValues = 1;
  required string manifest = 3;
  // required string actorsProvidersHashList = 4;
}
message TeaNodeProfileV2{
  required SignedPcrsBytes pcrValues = 1;
  required string manifest = 3;
  // required string actorsProvidersHashList = 4;
  required string mode = 4;
}

message Pcrs{
  repeated bytes pcrs = 1;
}

message RebuildOtherPeerPcrBytesRequest{
  required bytes ephemeralId = 1;
  required string manifest = 3;
}

message ResponseError{
  required string error = 1;
}

message GetEd25519KeyPairRequest{

}

message GetEd25519KeyPairResponse{
  required bytes keypair = 1;
}

message GetEphemeralIdKeyPairSigRequest{
  
}

message GetEphemeralIdKeyPairSigResponse{
  required bytes pubkey = 1;
  required bytes prikey = 2;
  required bytes sig = 3;
}

message GetTeaIdRequest{

}

message GetTeaIdResponse{
  required bytes teaId = 1;
}

message GetSignedPcrRequest{

}

message GetSignedPcrResponse{
  required Pcrs pcrs = 1;
  required bytes sig = 2; 
}

message ExtendPcrRequest{
  required bytes newPcr = 1;
}

message ExtendPcrResponse{
  required bool result = 1;
}

message TpmMessage{
  oneof msg{
    ResponseError ResponseError = 1;
    RsaEncryptRequest RasEncryptRequest = 2;
    RsaEncryptResponse RsaEncryptResponse = 3;
    ExtendPcrRequest ExtendPcrRequest = 4;
    ExtendPcrResponse ExtendPcrResponse = 5;
    VerifySignatureRequest VerifySignatureRequest = 6;
    VerifySignatureResponse VerifySignatureResponse = 7;
    Ed25519SignRequest Ed25519SignRequest = 8;
    Ed25519SignResponse Ed25519SignResponse = 9;
    Sr25519SignRequest Sr25519SignRequest = 10;
    Sr25519SignResponse Sr25519SignResponse = 11;
    RsaDecryptRequest RsaDecryptRequest = 12;
    RsaDecryptResponse RsaDecryptResponse = 13;
    GetEd25519KeyPairRequest GetEd25519KeyPairRequest = 14;
    GetEd25519KeyPairResponse GetEd25519KeyPairResponse = 15;
    GetEphemeralIdKeyPairSigRequest GetEphemeralIdKeyPairSigRequest = 16; 
    GetEphemeralIdKeyPairSigResponse GetEphemeralIdKeyPairSigResponse = 17; 
    GetTeaIdRequest GetTeaIdRequest = 18;
    GetTeaIdResponse GetTeaIdResponse = 19;
    GetSignedPcrRequest GetSignedPcrRequest = 20;
    GetSignedPcrResponse GetSignedPcrResponse = 21;
  }
}
