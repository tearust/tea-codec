syntax = "proto2";

package actor_delegate;

message CidHash{
  required string cid = 1;
  required bytes hash = 2;
}

message TaskRegisterRequest{
  repeated CidHash cidHash = 1;
  //required bytes ekey1 = 2;
  required bytes blockChainAccount = 3;
  required CidHash wasm = 4;   // wasm 
  required CidHash wasmManifest = 5;  // wasm manifest
  required CidHash wasmChecker = 6;  // wasm checker
  required uint32 payment = 7;  // gas
}

message TaskRegisterResponse{
  optional string RefNum = 1;
  optional string RsaPubKey = 3;
  optional string Error = 2;
}

message DataRegisterRequest{
  required bytes depositTxId = 1;
  required bytes blockChainAccount = 3;
}

message DataRegisterResponse{
  oneof res{
    string Error = 1;
    string RsaPubKey = 2;
  }
}

message ServiceRegisterRequest{
  required bytes depositTxId = 1;
  required bytes blockChainAccount = 3;
}

message ServiceRegisterResponse{
  oneof res{
    string Error = 1;
    string RsaPubKey = 2;
  }
}

message DataUploadCompletedNotify{
  oneof Cid {//user need to specity to Adapter what type of data he uploads to IPFS. We can use query string type=Data or type=Description in URL
            //Adapter use this query string to set this value
    string CidData = 1;//this could be data or wasm code's cid
    string CidDescription = 2;
    string CidCapchecker = 3; //If uploaded is code, CidCapchecker is valid capchecker cid. If uploaded is data, this is empty string ""
  }
  required string RsaPubKey = 10;//RsaPubKey = somekey in query string. Adapter need to parse this query param and send the RsaPubKey to Delegator to verify
  optional string KeyUrlEncoded = 11; //If the uploaded data is encrypted. this key_url_encoded must be in the query params. Otherwise no one can decrypt this data.
                                      // if the data is not encrypted, such as description is not encrypted. The key_url_encoded is None.
                                      // In order to be used in url, this key is Url_encoded. Please url_decode before use.
}

message AddNewTask{
  required bytes teaId = 1;
  required bytes refNum = 2;
  required bytes rsaPub = 3;
  required string capCid = 4;
  required string modelCid = 5;
  required string dataCid = 6;
  required uint32 payment = 7;
}

message TaskBody {
  required string manifestCid = 4;
  // the wasm/yaml file that used to check capabilities. Executor needs to run this
  // wasm/yaml against its own runtime to know if itself is capable to run this task
  required string capCid = 3;
  required string wasmCid = 5;
  //Use IPFS block_get(dataCid) to download the data. This data is the parameter of the task wasm
  //By default, this data (after downloaded from IPFS) is encrypted. The decrypt key is ekey1 (after decrypted by rsa_pub though)
  required string dataCid = 6;
  //This eKey1 can be decrypted by delegate (who issue the rsa key pair). After decrypted, it can be
  //used to decrypt data so that the task wasm can run against
  required bytes ekey1 = 7;//this is base64 encoded bytes.
}

message Task {
  required bytes refNum = 1;//this is [u8] not base64 nor hex
  required bytes delegateId = 2;
  required string modelCid = 3;
  required string bodyCid = 4;
  required uint32 payment = 5;
}

message Data {//this could be data or code(service).
  required bytes delegatorEphemeralId = 1;
  required string deploymentId = 2;
  required string dataCid = 3;//The cid of encrypted data or code. We consider code is also data in this case
  required string descriptionCid = 4;//the cid of description object(or DAG). This description can be any format. We can define the format somewhere else.
  optional string capCid = 5;//When this is a data or a service without any requirment to check capability, we can set this property to None.
                              //The wannabepinner will not check capability if this is none
                              //It make sense for most data type pinner because we only check if it is a valid Tea Node.
                              //For service pinner, in most case we may need to run a capchecker to make sure the service pinner has the 
                              //capabilities required.
}

message Service {
  required bytes delegateId = 2;
  required string modelCid = 3;
  required string bodyCid = 4;
  required uint32 payment = 5;
}

message AddNewTaskRequest {
  required Task task = 1;
}

message AddNewTaskResponse {
  required bytes accountId = 1;
  required Task task = 2;
}

message AddNewDataRequest {
  required Data data = 1;
}

message AddNewDataResponse {
  required bytes accountId = 1;
  required Data data = 2;
}

message CompleteTaskRequest {
  required bytes refNum = 1;
  required bytes teaId = 2;
  required bytes delegateSig = 3;
  required bytes result = 4;
  required bytes resultSig = 5;
}

message CompleteTaskResponse {	
  required bytes refNum = 1;	
  required bytes accountId = 2;	
  required bytes result = 3;	
}

message DepositInfoRequest {
  required string accountId = 1;
  required bytes delegatorTeaId = 2;
}

message DepositInfoResponse {
  required string accountId = 1;
  required bytes delegatorTeaId = 2;
  required bytes delegatorEphemeralId = 3;
  required bytes delegatorSignature = 4;
  required uint32 amount = 5;
  required uint64 expiredTime = 6;
}

message Bill {
  required string accountId = 1;
  required uint32 payment = 2;
}

message SettleAccountsRequest {
  required string employer = 1;
  required bytes delegatorTeaId = 2;
  required bytes delegatorEphemeralId = 3;
  required string errandUuid = 4;
  required string errandJsonCid = 5;
  repeated Bill bills = 6;
  required bytes employerSignature = 7;
  required bytes executorEphemeralId = 8;
  required uint64 expiredTime = 9;
  required bytes delegateSignature = 10;
  required string resultCid = 11;
  required bytes executorSingature = 12; // The Ed25519 sig for concat bytes: errandUuid + resultCid + delegateSignature
}

message SettleAccountsResponse {
  required string accountId = 1;
  required bytes delegatorTeaId = 2;
  required string employer = 3;
  required bytes delegatorEphemeralId = 4;
  required string errandUuid = 5;
  required string errandJsonCid = 6;
  repeated Bill bills = 7;
  required bytes executorEphemeralId = 8;
  required uint64 expiredTime = 9;
  required string resultCid = 10;
}

message UpdateRuntimeActivity {
  required bytes teaId = 1;
  required string cid = 2;      // This is the setting cid from IPFS
  required bytes ephemeralId = 3;
  required bytes signature = 4; // The Ed25519 sig for concat bytes: teaId + cid
  optional bytes delegatePubKey = 5;
}

message RuntimeActivityRequest {
  required bytes teaId = 1;
}

message RuntimeActivityResponse {
  required bytes teaId = 1;
  required string cid = 2;
  required uint32 updateHeight = 3;
}

message AddNewNodeRequest {
  required bytes teaId = 1;
}

message AddNewNodeResponse {
  required string accountId = 1;
  required bytes teaId = 2;
}

message NotifyDelegateTaskComplete{
  required bytes refNum = 1;
}

message BeMyDelegateRequest {
  required string layer1Account = 1;
  required bytes nonce = 2;
}

message QueryBalanceRequest {
  required string accountId = 1;
  required bytes delegatorTeaId = 2;
}

message QueryErrandExecutionResult {
  required bytes errandId = 1;
}

message RepinDeploymentRequest {//this could be data or code(service).
  required string deploymentId = 1;
  required string dataCid = 2;//The cid of encrypted data or code. We consider code is also data in this case
  required string descriptionCid = 3;//the cid of description object(or DAG). This description can be any format. We can define the format somewhere else.
  optional string capCid = 4;//When this is a data or a service without any requirment to check capability, we can set this property to None.
                              //The wannabepinner will not check capability if this is none
                              //It make sense for most data type pinner because we only check if it is a valid Tea Node.
                              //For service pinner, in most case we may need to run a capchecker to make sure the service pinner has the 
                              //capabilities required.
}

message TaskPaymentDescription {
  // todo add detailed payment description
}

message KeyGenerationData {
  required uint32 n = 1;  // splite the secret to `n` pieces, note we support range of u8 (0~127)
  required uint32 k = 2;  // if have k (k < n) pieces the secret can be recovered, note we support range of u8 (0~127)
  required string keyType = 3; // identify key generation type
  required bytes delegatorTeaNonceHash = 4;
  required bytes delegatorTeaNonceRsaEncryption = 5;
}

message KeyGenerationResponse {
  required string taskId = 1;
  required KeyGenerationData dataAdhoc = 2;
  required TaskPaymentDescription payment = 3;
  required bytes p1PublicKey = 4;
}

message SignWithKeySlicesRequest {
  required string taskId = 1;
  required bytes adhocData = 2;
  required bytes multiSigAccount = 3;
  required TaskPaymentDescription payment = 4;
  required bytes delegatorTeaId = 5;  // teaId of delegator
  required bytes p1Signature = 6;
}

// Return as JSON formatter.
// message BeMyDelegateResponse {    
//   required bytes teaId = 1;
//   required bytes ephemeralId = 2;
//   required bytes sig = 3;
// }
