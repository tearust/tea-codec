syntax = "proto2";

package actor_delegate;

message CidHash{
  required string cid = 1;
  required bytes hash = 2;
}
 
message TaskRegisterRequest{
  repeated CidHash cidHash = 1;
  //required bytes ekey1 = 2;
  required bytes blockChainAccount = 3;
  required CidHash wasm = 4;   // wasm 
  required CidHash wasmManifest = 5;  // wasm manifest
  required CidHash wasmChecker = 6;  // wasm checker
  required uint32 payment = 7;  // gas
}

message TaskRegisterResponse{
  optional string RefNum = 1;
  optional string RsaPubKey = 3;
  optional string Error = 2;
}

message AddNewTask{
  required bytes teaId = 1;
  required bytes refNum = 2;
  required bytes rsaPub = 3;
  required string capCid = 4;
  required string modelCid = 5;
  required string dataCid = 6;
  required uint32 payment = 7;
}



/////////  Communication between delegate and executor
message GeneralTaskMessage{
  enum MessageType{
    ApplyToExecuteTaskRequest = 0;//body is bytes of ApplyToExecuteTaskRequest
    WinnerExecutorCert = 1;//body is bytes of WinnerExecutorCert
  };
  required MessageType messageType = 1;
  required bytes payload = 2;
}

message WinnerExecutorCertPayload{
  required bytes refNum = 1;
  required bytes winnerTeaId = 2;
  required bytes signature = 3;
  optional bytes secKeysRsaBytes = 4;
}


message ApplyToExecuteTaskRequest{
  required bytes refNum = 1;//if encoded using base64, it will become the pubsub topic. 
  required string taskBodyCid = 2;//Using IPFS to get the BaskBody using this Cid
  required bytes rsaPubKey = 3;//Delegate will use this RSA Pub Key to encrypt the key1 when sending to Executor
  //required bytes HashDownloadFile = 4;//this is used to verify if the executor actually downloaded the file from IPFS
  repeated bytes capCheckers= 5;
  required bytes executorTeaId = 6;//The Tea Id of the executor who apply for this task
  required bytes signature = 7;//The Ed25519 sig for concat bytes: executorTeaId + capcheckers[0] + ..+ capcheckers[n]
}

message TaskBody {
  //required bytes refNum = 1;
  required bytes rsaPub = 2;
  required string capCid = 3;
  required string manifestCid = 4;
  required string wasmCid = 5;
  required string dataCid =6;
  required bytes ekey1 = 7;
}


/////////  Communication between delegate and facade.
message Task {
  required bytes refNum = 1;
  required bytes delegateId = 2;
  required string modelCid = 3;
  required string bodyCid = 4;
  required uint32 payment = 5;
}

message Node {
  required bytes teaId = 1;
  repeated bytes peers = 2;
}

message AddNewTaskRequest {
  required Task task = 1;
}

message AddNewTaskResponse {
  required bytes accountId = 1;
  required bytes refNum = 2;
  required Node delegateNode = 3;
}

message CompleteTaskRequest {
  required bytes refNum = 1;
  required bytes teaId = 2;
  required bytes delegateSig = 3;
  required bytes result = 4;
  required bytes resultSig = 5;
}

message CompleteTaskResponse {
  required bytes refNum = 1;
  required bytes accountId = 2;
  required bytes result = 3;
}

