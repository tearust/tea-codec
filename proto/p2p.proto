syntax = "proto3";
package p2p;

message ResponseError{
  string error = 1;
}

message PeerApprovePinnerRequest {
  string deploymentId = 1;//this is cid of pinner_key's pub key
  uint32 nonce = 2; // this is an random number for verify
}

message PeerApprovePinnerResponse {
  string deploymentId = 1;//this is cid of pinner_key's pub key
  bytes signature = 2;//The Ed25519 sig for nonce
}

message ApplyToBePinnerRequest{
  string deploymentId = 1;//this is cid of pinner_key's pub key
  bytes rsaPubKey = 2;//Delegate will use this RSA Pub Key to encrypt the key1 when sending to Executor. Format is tpm_protp::RsaKeyPairPemPcsk1.publicKey string.as_bytes()
  bytes wannabePinnerId = 3;//The ephemeral Id of the wannabe pinner
  bytes signature = 4;//The Ed25519 sig for concat bytes: wannabe_ephemeral_id + rsa_key_pub
}

message ApplyToBePinnerResponse{
  string deploymentId = 1;//this is cid of pinner_key's pub key
  bytes pinnerKeyEncrypted = 2; //The full pinner key encoded by rsa_pubkey from wannabe pinner.
  bytes key1Encrypted = 3; //The key1 encoded by rsa_pubkey from upstream pinner.
  bytes upstreamPinnerTeaId = 4;//use the upstream tea_id to make a broacasting chain so that we can trace back when make payment or verify
  //we use tea_id instead of ephemeral_id because this chain would be a long life time use. ephemeral key changes
  // every time the tea node reboot.
  // Base on today's idea, the first revenue comes from hosting as pinner will 100% go to upstream pinner. after that
  // the revenue doens't need to share to upstream
  // problem: what if the data is only for one time use?
  bytes signature = 5;//The Ed25519 sig for concat bytes: pinner's ephemeral key + pinner_key_enc
}

message RsaKeyRequest {
  bytes data = 1;
}
message RsaKeyResponse {
  bytes data = 1;
}

message GeneralMsg{
  oneof res {

    RsaKeyResponse RsaKeyResp = 5;
    RsaKeyRequest RsaKeyReq = 4;

    PeerApprovePinnerRequest PeerApproveRequest = 2;
    PeerApprovePinnerResponse PeerApproveResponse = 3;

    ApplyToBePinnerRequest ApplyPinnerRequest = 6;
    ApplyToBePinnerResponse ApplyPinnerResponse = 7;

    ResponseError error = 1;
  }
}