syntax = "proto3";
package layer1;

message Layer1Inbound {
    oneof msg {
        TappTopupEvent TappTopupEvent = 1;
        TappHostedEvent TappHostedEvent = 2;
        TappUnhostedEvent TappUnhostedEvent = 3;
        NewBlockEvent NewBlockEvent = 4;
        TappBecomeActiveEvent TappBecomeActiveEvent = 5;
        NewNodeJoinedEvent NewNodeJoinedEvent = 6;
        CommitRaResultEvent CommitRaResultEvent = 7;
        UpdateNodeProfileEvent UpdateNodeProfileEvent = 8;
        MiningStartedEvent MiningStartedEvent = 9;
        MiningStoppedEvent MiningStoppedEvent = 10;
        CmlMigratedEvent CmlMigratedEvent = 11;
        TAppCreatedEvent TAppCreatedEvent = 12;
        DesignedTappStoreCountChangedEvent DesignedTappStoreCountChangedEvent = 13;

        // different from events, async response will dispatch to specific actor
        SendTxAsyncResponse SendTxAsyncResponse = 99;
    }
}

message Layer1Outbound {
    oneof msg {
        ApiInfoRequest ApiInfoRequest = 1;
        SendTxRequest SendTxRequest = 2;
        TappInfoRequest TappInfoRequest = 3;
        ListTappsRequest ListTappsRequest = 4;
        QueryTAppResourceRequest QueryTAppResourceRequest = 5;
        TeaNodeUpdateProfileRequest TeaNodeUpdateProfileRequest = 6;
        CommitRaResultRequest CommitRaResultRequest = 7;
        ListMiningCmlsRequest ListMiningCmlsRequest = 8;
        IsRaValidatorRequest IsRaValidatorRequest = 9;
        GetMinerInfoRequest GetMinerInfoRequest = 10;
        CommitReportEvidenceRequest CommitReportEvidenceRequest = 11;
        CommitOfflineEvidenceRequest CommitOfflineEvidenceRequest = 12;
        CommitTipsEvidenceRequest CommitTipsEvidenceRequest = 13;
        ListAllowedPcrsRequest ListAllowedPcrsRequest = 14;
        GetNodePcrsRequest GetNodePcrsRequest = 15;
        GetConnIdRequest GetConnIdRequest = 16;
        GetPeerIdRequest GetPeerIdRequest = 17;
        ListAllowedVersionsRequest ListAllowedVersionsRequest = 18;
        ReportNodeVersionExpiredRequest ReportNodeVersionExpiredRequest = 19;
        ListVersionExpiredNodesRequest ListVersionExpiredNodesRequest = 20;
        ConstructExtrinsicCallRequest ConstructExtrinsicCallRequest = 21;
        ReportSelfOfflineRequest ReportSelfOfflineRequest = 22;
        GetTappStoreDesiredCountRequest GetTappStoreDesiredCountRequest = 23;
        GetTappStoreStartupNodesRequest GetTappStoreStartupNodesRequest = 24;

        WithdrawTxRequest WithdrawTxRequest = 25;
    }
}

message ConstructExtrinsicRequest {
    SubstrateApiInfo substrateApiInfo = 1;
    bytes privateKey = 2;
    bytes extrinsicCall = 3;
}

message ExtrinsicCallParams {
    oneof msg {
        TransferFreeBalance TransferFreeBalance = 3;
    }
}

message ConstructExtrinsicCallRequest {
    ExtrinsicCallParams callParams = 1;
}

message ConstructExtrinsicCallResponse {
    bytes callEncode = 1;
}

message TransferFreeBalance {
    bytes toPublicKey = 1;
    bytes amount = 2;
}

message ConstructExtrinsicResponse {
    bytes rawTransaction = 1;
}

message SendTxRequest {
    bytes rawTransaction = 1;
    uint32 retryCount = 2;
    string uuid = 3;
    string replyToActor = 4;
}

message SendTxAsyncResponse {
    TxResponse response = 1;
    TxErrorResponse error = 2;
    uint32 leftRetryCount = 3;
    string uuid = 4;
    string replyToActor = 5;
}

message TxResponse {
   string blockHash = 1;
}

message TxErrorResponse {
   string errorMessage = 2;
}

message ApiInfoRequest {
    bytes accountPubKey = 1;
}

message ApiInfoResponse {
    SubstrateApiInfo substrateApiInfo = 1;
}

message TappInfoRequest {
    uint64 tappId = 1;
}

message TappInfoResponse {
    uint64 tappId = 1;
    bytes name = 2;
    bytes link = 3;
}

message QueryTAppResourceRequest {
    uint64 tappId = 1;
}

message QueryTAppResourceResponse {
    string cid = 1;
}

message ListTappsRequest {
    bool activeOnly = 1;
}

message ListTappResponse {
    repeated uint64 tappIds = 1;
}

message ListMiningCmlsRequest {
}

message ListMiningCmlsResponse {
    repeated MiningCmlInfo miningCmls = 1;
}

message IsRaValidatorRequest {
    bytes teaId = 1;
    bytes targetTeaId = 2;
    uint32 blockNumber = 3;
}

message IsRaValidatorResponse {
    bool isValidator = 1;
}

message GetMinerInfoRequest {
    bytes teaId = 1;
}

message GetMinerInfoResponse {
    uint64 cmlId = 1;
    string cmlClass = 2;
    string ipAddress = 3;
    bool isBootstrap = 4;
    string minerStatus = 5;
}

message CommitReportEvidenceRequest {
    bytes teaId = 1;
    bytes reporterTeaId = 2;
    bytes phisherTeaId = 3;
    bytes signature = 4;
}

message CommitTipsEvidenceRequest {
    bytes teaId = 1;
    bytes reporterTeaId = 2;
    bytes phisherTeaId = 3;
    bytes signature = 4;
}

message CommitOfflineEvidenceRequest {
    bytes teaId = 1;
    bytes offlineTeaId = 2;
    bytes signature = 3;
}

message MiningCmlInfo {
    uint64 cmlId = 1;
    string orbitId = 2;
    string cmlType = 3;
    bytes teaId = 4;
    string minerStatus = 5;
    uint32 tappCount = 6;
}

message SubstrateApiInfo {
    bytes header = 1; // finalized block header serialized with serde
    uint64 period = 2;
    bytes head = 3; // finalized block hash
    uint32 nonce = 4;
}

message Layer1Settings {
    uint32 runtimeSpecVersion = 1;
    uint32 runtimeTransactionVersion = 2;
    bytes genesisHash = 3;
}

message TappTopupEvent {
    uint64 tappId = 1;
    string fromAccount = 2;
    string toAccount = 3;
    bytes amount = 4;
    uint32 height = 5;
}

message TappHostedEvent {
    uint64 tappId = 1;
    uint64 cmlId = 2;
    bytes teaId = 3;
    bool becomeActive = 4;
}

message TappUnhostedEvent {
    uint64 tappId = 1;
    uint64 cmlId = 2;
    bool becomePending = 3;
}

message TappBecomeActiveEvent {
    uint64 tappId = 1;
    uint32 hostCount = 3;
}

message NewNodeJoinedEvent {
    string account = 1;
    bytes teaId = 2;
}

message CommitRaResultEvent {
    string accountId = 1;
    bytes teaId = 2;
    bytes targetTeaId = 3;
    bool isPass = 4;
    string targetStatus = 5;
    bool statusChanged = 6;
}

message UpdateNodeProfileEvent {
    bytes ephemeralPublicKey = 1;//Generated by TPM everytime when tea node starts. It is expired when shutdown.
    string profileCid = 2;//IPFS Cid to store profile object->TeaNodeProfile
    bytes teaId = 3;//The node's TPM ID which generates ephemeralPublicKey and sign 
    string peerId = 5;//ipfs peer id used for peer 2 peer communication
    repeated RANode raNodes = 6;
    string status = 7;
    string accountId = 8;
    uint32 updateHeight = 9;
    string connId = 10;
}

message TAppCreatedEvent {
    uint64 tappId = 1;
    string tappName = 2;
    string tappOwner = 3;
    uint32 createHeight = 4;
}

message DesignedTappStoreCountChangedEvent {
    uint32 count = 1;
}

message MiningStartedEvent {
    uint64 cmlId = 1;
    bytes teaId = 2;
    string ipAddress = 3;
}

message MiningStoppedEvent {
    uint64 cmlId = 1;
    bytes teaId = 2;
}

message CmlMigratedEvent {
    uint64 cmlId = 1;
    bytes teaId = 2;
    string ipAddress = 3;
}

message RANode {
    bytes teaId = 1;
    bool isPass = 2;
}

message NewBlockEvent {
    uint32 blockNumber = 1;
    bytes parentHash = 2;
    bytes stateRoot = 3;
    bytes extrinsicRoot = 4;
    bool isSync = 5;
}

message RegisterLayer1EventRequest {}

message TeaNodeUpdateProfileRequest{
  bytes ephemeralPublicKey = 1;//Generated by TPM everytime when tea node starts. It is expired when shutdown.
  string profileCid = 2;//IPFS Cid to store profile object->TeaNodeProfile
  bytes teaId = 3;//The node's TPM ID which generates ephemeralPublicKey and sign 
  bytes pcrHash = 4;
  string peerId = 5;//ipfs peer id used for peer 2 peer communication
  string connId = 6;
}

message CommitRaResultRequest {
  bytes teaId = 1;
  bytes targetTeaId = 2;
  bool isPass = 3;
  bytes signature = 4;
}

message ListAllowedPcrsRequest {}

message ListAllowedPcrsResponse {
    repeated PcrSlots pcrSlots = 1;
}

message PcrSlots {
    string hash = 1;
    repeated bytes pcrs = 2;
}

message PcrToHashRequest {
    repeated bytes pcrs = 2;
}

message PcrToHashResponse {
    bytes hash = 1;
}

message GetNodePcrsRequest {
    bytes teaId = 1;
}

message GetNodePcrsResponse {
    repeated bytes pcrs = 1;
}

message GetConnIdRequest {
    bytes teaId = 1;
}

message GetConnIdResponse {
    string connId = 1;
}

message GetPeerIdRequest {
    bytes teaId = 1;
}

message GetPeerIdResponse {
    string peerId = 1;
}

message ListAllowedVersionsRequest {
}

message ListAllowedVersionsResponse {
    repeated VersionSet versionSetList = 1;   
}

message VersionSet {
    string hash = 1;
    repeated VersionItem versions = 2;
    VersionExpire versionExpire = 3;
}

message VersionExpire {
    uint32 expireHeight = 1;
}

message VersionItem {
    string key = 1;
    string version = 2;
}

message ReportNodeVersionExpiredRequest {
    bytes teaId = 1;
}

message ReportSelfOfflineRequest {
    bytes teaId = 1;
    bytes signature = 2;
}

message ListVersionExpiredNodesRequest {
}

message ListVersionExpiredNodesResponse {
    repeated bytes teaIds = 1;
}

message GetTappStoreDesiredCountRequest {}
message GetTappStoreDesiredCountResponse {
    uint32 count = 1;
}

message GetCachedMinerInfoRequest {
    bytes teaId = 1;
}
message GetCachedMinerInfoResponse {
    bytes data = 1;
    bool hit = 2;
}

message SetCachedMinerInfoRequest {
    bytes teaId = 1;
    bytes data = 2;
}

message GetTappStoreStartupNodesRequest {}
message GetTappStoreStartupNodesResponse {
    repeated bytes nodes = 1;
}

message WithdrawTxRequest {
    string toAccount = 1;
    bytes amount = 2;
    uint64 tappId = 3;
    bytes tsId = 4;
}