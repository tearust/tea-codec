syntax = "proto3";
package raft;

message ChannelOutboundMessage {
	string providerName = 1;
	uint64 peerId = 2;
	ChannelMessages message = 3;
}

message ChannelInboundMessage {
	string providerName = 1;
	ChannelMessages message = 2;
}

message TcpWrapperMessage {
	string providerName = 1;
	ChannelMessages message = 2;
}

message ChannelMessages {
	oneof msg {
		NormalMessage NormalMessage = 1;
		ProposalMessage ProposalMessage = 2;
		PeerNodesUpdate PeerNodesUpdate = 3;
		PeerNodesBroadcast PeerNodesBroadcast = 4;
		DefaultPeerInit DefaultPeerInit = 5;
	}
}

message GetValueRequest {
	string key = 1;
	string uuid = 2;
}

message GetValueResponse {
	bytes value = 1;
	string error = 2;
}

message SetValueRequest {
	string key = 1;
	bytes value = 2;
	string uuid = 3;
}

message SetValueResponse {
	bool success = 1;
}

message NormalMessage {
	bytes message = 1; // serialize from `Message` object in raft-rs
}

message ProposalMessage {
	string uuid = 1;
	NormalProposal normal = 2;
	ConfChangeProposal confChange = 3;
	TransferLeaderProposal transferLeader = 4;
}

message NormalProposal {
	string key = 1;
	bytes value = 2;
}

message ConfChangeProposal {
	bytes message = 1; // serialize from `ConfChange` object in raft-rs
}

message TransferLeaderProposal {
	uint64 peerId = 1;
}

message InnerChangeStorageMessage {
	string key = 1;
	bytes value = 2;
}

message PeerNodesUpdate {
	repeated PeerNode nodes = 1;
	bool isLeader = 2;
}

message PeerNode {
	uint64 peerId = 1;
	string address = 2;
	uint32 port = 3;
}

message PeerNodesBroadcast {
	bool isLeader = 1;
}

message DefaultPeerInit {
	uint64 peerId = 1;
	bool isLeader = 2;
}